# Type

1. Dans la cellule de code ci-dessous, quel est, pour chaque cellule, le type de l'objet x ?  
`indice`: vous pouvez utiliser `type(x)` pour le révéler.

1.1

x = 5

type(x)

1.2

x = "Hello World"

type(x)

1.3

x = 2.5

type(x)

1.4

x = ["mintcream", "burlywood", "salmon"]

type(x)

1.5

x = ("mintcream", "burlywood", "salmon")

type(x)

1.6

x = {"name": "Jules César", "Job": "Musician", "age": 55}

type(x)

1.7

x = True

2. Maintenant, vous allez devoir convertir des objets d'un certain type, en un autre type d'objet.  
C'est parti !

2.1 Convertissez x en float.

x = 5


float(x)

2.2 Convertissez x en int

x = 5.4

int(5.4)

2.3 Convertissez x en int

x = 5.6


int(5.6)

2.4 Que pouvez-vous remarquer ?

Réponse: int arrondi au chiffre inférieur

2.5 Trouvez le moyen d'arrondir x.

x = 5.6


>>> round(5.6)

2.6 Après avoir arrondi x, est-ce que x est toujours un `float` ?  
Réponse: nope

2.7 Ci-dessous, est-ce que x est un `int` ?

x = 6.0


int(6.0)

integer but used floating value

2.8 Arrondissez x avec 3 valeurs décimales.


x = 3.14159265359
round(x,3)

# Built-in Function

3.1 Utilisez une [built-in function](https://docs.python.org/3/library/functions.html) pour compter le nombre de lettres dans l'objet de type `string` suivant:

x = "Hello World"
len(x)

3.2 Utilisez une built-in function pour compter le nombre d'éléments dans l'objet de type `list` suivant:

x = ["non", "pas", 1, "ni", 2, "ni", 3, "mais", 7.2132]

len(x)

3.3 Utilisez une built-in function sur une des deux variables pour que `resultat`  contienne une valeur positive.

var_1 = 4
var_2 = -5

resultat = var_1 + abs(var_2)
print(resultat)

3.4 Utilisez une built-in function pour renvoyer la valeur minimum de la `list` suivante:

a_list = [3.2, 41, 2, 23, 7]
min(a_list)

3.5 Utilisez une built-in function pour renvoyer la somme des valeurs de la `list` suivante:

a_list = [3.2, 41, 2, 23, 7]
sum(a_list)
